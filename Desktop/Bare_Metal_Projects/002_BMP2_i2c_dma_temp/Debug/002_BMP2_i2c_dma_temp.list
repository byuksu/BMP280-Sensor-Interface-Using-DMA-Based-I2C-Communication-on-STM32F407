
002_BMP2_i2c_dma_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001124  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012ac  080012b4  000022b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012ac  080012ac  000022b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080012ac  080012ac  000022b4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080012ac  080012b4  000022b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012ac  080012ac  000022ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012b0  080012b0  000022b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000022b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000022b4  2**0
                  CONTENTS
 10 .bss          00000048  20000000  20000000  00003000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00003000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dd6  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041e  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  000034d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b1  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001863f  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000169e  00000000  00000000  0001bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000890b9  00000000  00000000  0001d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a641f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003fc  00000000  00000000  000a6464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000a6860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001294 	.word	0x08001294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08001294 	.word	0x08001294

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <bmp280_read_calibration>:
double 						var1;
double 						var2;
double 						temperature;


void bmp280_read_calibration(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

	uint8_t temp[2];

	i2c_read(BMP280_ADDR, 0x88, temp, 2);
 80009aa:	1d3a      	adds	r2, r7, #4
 80009ac:	2302      	movs	r3, #2
 80009ae:	2188      	movs	r1, #136	@ 0x88
 80009b0:	2076      	movs	r0, #118	@ 0x76
 80009b2:	f000 fafd 	bl	8000fb0 <i2c_read>
	dig_T1Data = (uint16_t)(temp[1] << 8) | temp[0];
 80009b6:	797b      	ldrb	r3, [r7, #5]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	793a      	ldrb	r2, [r7, #4]
 80009be:	4313      	orrs	r3, r2
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <bmp280_read_calibration+0x68>)
 80009c4:	801a      	strh	r2, [r3, #0]

	i2c_read(BMP280_ADDR, 0x8A, temp, 2);
 80009c6:	1d3a      	adds	r2, r7, #4
 80009c8:	2302      	movs	r3, #2
 80009ca:	218a      	movs	r1, #138	@ 0x8a
 80009cc:	2076      	movs	r0, #118	@ 0x76
 80009ce:	f000 faef 	bl	8000fb0 <i2c_read>
	dig_T2Data = (uint16_t)(temp[1] << 8) | temp[0];
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	793a      	ldrb	r2, [r7, #4]
 80009da:	4313      	orrs	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b21a      	sxth	r2, r3
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <bmp280_read_calibration+0x6c>)
 80009e2:	801a      	strh	r2, [r3, #0]

	i2c_read(BMP280_ADDR, 0x8C, temp, 2);
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	2302      	movs	r3, #2
 80009e8:	218c      	movs	r1, #140	@ 0x8c
 80009ea:	2076      	movs	r0, #118	@ 0x76
 80009ec:	f000 fae0 	bl	8000fb0 <i2c_read>
	dig_T3Data = (uint16_t)(temp[1] << 8) | temp[0];
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	793a      	ldrb	r2, [r7, #4]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <bmp280_read_calibration+0x70>)
 8000a00:	801a      	strh	r2, [r3, #0]

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000001c 	.word	0x2000001c
 8000a10:	2000001e 	.word	0x2000001e
 8000a14:	20000020 	.word	0x20000020

08000a18 <bmp280_compensate_temp>:


uint32_t bmp280_compensate_temp(signed long data)
{
 8000a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	var1=((data*1.0)/(16384.0)-(dig_T1Data*1.0)/1024.0)*(dig_T2Data*1.0);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fd22 	bl	800046c <__aeabi_i2d>
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	4b57      	ldr	r3, [pc, #348]	@ (8000b8c <bmp280_compensate_temp+0x174>)
 8000a2e:	f7ff feb1 	bl	8000794 <__aeabi_ddiv>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4614      	mov	r4, r2
 8000a38:	461d      	mov	r5, r3
 8000a3a:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <bmp280_compensate_temp+0x178>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd14 	bl	800046c <__aeabi_i2d>
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	4b52      	ldr	r3, [pc, #328]	@ (8000b94 <bmp280_compensate_temp+0x17c>)
 8000a4a:	f7ff fea3 	bl	8000794 <__aeabi_ddiv>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	460b      	mov	r3, r1
 8000a52:	4620      	mov	r0, r4
 8000a54:	4629      	mov	r1, r5
 8000a56:	f7ff fbbb 	bl	80001d0 <__aeabi_dsub>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4614      	mov	r4, r2
 8000a60:	461d      	mov	r5, r3
 8000a62:	4b4d      	ldr	r3, [pc, #308]	@ (8000b98 <bmp280_compensate_temp+0x180>)
 8000a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fcff 	bl	800046c <__aeabi_i2d>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	460b      	mov	r3, r1
 8000a72:	4620      	mov	r0, r4
 8000a74:	4629      	mov	r1, r5
 8000a76:	f7ff fd63 	bl	8000540 <__aeabi_dmul>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	4947      	ldr	r1, [pc, #284]	@ (8000b9c <bmp280_compensate_temp+0x184>)
 8000a80:	e9c1 2300 	strd	r2, r3, [r1]
	var2=(((data*1.0)/(131072.0)-(dig_T1Data*1.0)/8192.0)*((data*1.0)/(131072.0)-(dig_T1Data*1.0)/8192.0))*(dig_T3Data*1.0);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fcf1 	bl	800046c <__aeabi_i2d>
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8000a92:	f7ff fe7f 	bl	8000794 <__aeabi_ddiv>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	4614      	mov	r4, r2
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <bmp280_compensate_temp+0x178>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fce2 	bl	800046c <__aeabi_i2d>
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba0 <bmp280_compensate_temp+0x188>)
 8000aae:	f7ff fe71 	bl	8000794 <__aeabi_ddiv>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	4629      	mov	r1, r5
 8000aba:	f7ff fb89 	bl	80001d0 <__aeabi_dsub>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	4614      	mov	r4, r2
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fcd0 	bl	800046c <__aeabi_i2d>
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8000ad4:	f7ff fe5e 	bl	8000794 <__aeabi_ddiv>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	4690      	mov	r8, r2
 8000ade:	4699      	mov	r9, r3
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <bmp280_compensate_temp+0x178>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fcc1 	bl	800046c <__aeabi_i2d>
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <bmp280_compensate_temp+0x188>)
 8000af0:	f7ff fe50 	bl	8000794 <__aeabi_ddiv>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	4640      	mov	r0, r8
 8000afa:	4649      	mov	r1, r9
 8000afc:	f7ff fb68 	bl	80001d0 <__aeabi_dsub>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4620      	mov	r0, r4
 8000b06:	4629      	mov	r1, r5
 8000b08:	f7ff fd1a 	bl	8000540 <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4614      	mov	r4, r2
 8000b12:	461d      	mov	r5, r3
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <bmp280_compensate_temp+0x18c>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fca6 	bl	800046c <__aeabi_i2d>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4620      	mov	r0, r4
 8000b26:	4629      	mov	r1, r5
 8000b28:	f7ff fd0a 	bl	8000540 <__aeabi_dmul>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	460b      	mov	r3, r1
 8000b30:	491d      	ldr	r1, [pc, #116]	@ (8000ba8 <bmp280_compensate_temp+0x190>)
 8000b32:	e9c1 2300 	strd	r2, r3, [r1]
	temperature=(var1+var2)/2;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <bmp280_compensate_temp+0x184>)
 8000b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <bmp280_compensate_temp+0x190>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	f7ff fb47 	bl	80001d4 <__adddf3>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b56:	f7ff fe1d 	bl	8000794 <__aeabi_ddiv>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4913      	ldr	r1, [pc, #76]	@ (8000bac <bmp280_compensate_temp+0x194>)
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
	return temperature/5120.0;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <bmp280_compensate_temp+0x194>)
 8000b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <bmp280_compensate_temp+0x198>)
 8000b70:	f7ff fe10 	bl	8000794 <__aeabi_ddiv>
 8000b74:	4602      	mov	r2, r0
 8000b76:	460b      	mov	r3, r1
 8000b78:	4610      	mov	r0, r2
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f7ff fef2 	bl	8000964 <__aeabi_d2uiz>
 8000b80:	4603      	mov	r3, r0

}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b8c:	40d00000 	.word	0x40d00000
 8000b90:	2000001c 	.word	0x2000001c
 8000b94:	40900000 	.word	0x40900000
 8000b98:	2000001e 	.word	0x2000001e
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	40c00000 	.word	0x40c00000
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	20000030 	.word	0x20000030
 8000bac:	20000038 	.word	0x20000038
 8000bb0:	40b40000 	.word	0x40b40000

08000bb4 <delay_ms>:

void delay_ms(volatile uint32_t ms) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 16000; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e003      	b.n	8000bca <delay_ms+0x16>
        __NOP();
 8000bc2:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 16000; i++) {
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000bd0:	fb03 f202 	mul.w	r2, r3, r2
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d8f3      	bhi.n	8000bc2 <delay_ms+0xe>
    }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <bmp280_reset>:
    uint8_t id = 0;
    i2c_read(BMP280_ADDR, BMP280_ID_REG, &id, 1);
    return id;
}

void bmp280_reset(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

    uint8_t reset_cmd = 0xB6;
 8000bee:	23b6      	movs	r3, #182	@ 0xb6
 8000bf0:	71fb      	strb	r3, [r7, #7]
    i2c_write(BMP280_ADDR, &((uint8_t[]){BMP280_RESET_REG, reset_cmd})[0], 2);
 8000bf2:	23e0      	movs	r3, #224	@ 0xe0
 8000bf4:	713b      	strb	r3, [r7, #4]
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	717b      	strb	r3, [r7, #5]
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2076      	movs	r0, #118	@ 0x76
 8000c02:	f000 fa57 	bl	80010b4 <i2c_write>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <bmp280_init>:

void bmp280_init(void) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0


    // Reset
    bmp280_reset();
 8000c14:	f7ff ffe8 	bl	8000be8 <bmp280_reset>

    delay_ms(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f7ff ffcb 	bl	8000bb4 <delay_ms>
    // standby 500ms : Bit 7, 6, 5 = 100 , filter x4 : Bit 4, 3, 2 = 0x10
    uint8_t config[2] = {BMP280_CONFIG_REG, 0b10001000};
    i2c_write(BMP280_ADDR, config, 2);
*/
    // ctrl_meas (Bit 7, 6, 5 for temp): normal mode:11, temp x1 : 001, press x1: 001
    uint8_t ctrl_meas[2] = {BMP280_CTRL_MEAS_REG, 0x27};
 8000c1e:	f242 73f4 	movw	r3, #10228	@ 0x27f4
 8000c22:	80bb      	strh	r3, [r7, #4]
    i2c_write(BMP280_ADDR, ctrl_meas, 2);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2202      	movs	r2, #2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2076      	movs	r0, #118	@ 0x76
 8000c2c:	f000 fa42 	bl	80010b4 <i2c_write>
    bmp280_read_calibration();
 8000c30:	f7ff feb8 	bl	80009a4 <bmp280_read_calibration>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <bmp280_read_raw_temp_press>:

void bmp280_read_raw_temp_press(int32_t *temp, int32_t *press) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    i2c_read(BMP280_ADDR, 0xFA, buf, 3);
 8000c46:	f107 0208 	add.w	r2, r7, #8
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	21fa      	movs	r1, #250	@ 0xfa
 8000c4e:	2076      	movs	r0, #118	@ 0x76
 8000c50:	f000 f9ae 	bl	8000fb0 <i2c_read>

    //int32_t adc_P = ((int32_t)buf[0] << 12) | ((int32_t)buf[1] << 4) | (buf[2] >> 4);
    int32_t adc_T = ((int32_t)buf[0] << 12) | ((int32_t)buf[1] << 4) | (buf[2] >> 4);
 8000c54:	7a3b      	ldrb	r3, [r7, #8]
 8000c56:	031a      	lsls	r2, r3, #12
 8000c58:	7a7b      	ldrb	r3, [r7, #9]
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	7aba      	ldrb	r2, [r7, #10]
 8000c60:	0912      	lsrs	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    *temp = bmp280_compensate_temp(adc_T);
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fed5 	bl	8000a18 <bmp280_compensate_temp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
    //*press = bmp280_compensate_pressure(adc_P);
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <i2c1_init>:
#define I2C1_ADDR	       	  (1U << 1)
#define I2C1_TXE	       	  (1U << 7)
#define I2C1_ACK	       	 (1U << 10)
#define I2C1_BTF	       	 (1U << 2)

void i2c1_init(void){
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	//--------------------------------------
    //-----------gpiob config--------------
	//--------------------------------------

	// enable clock access for GPIOB (pb6 and pb7)
	RCC->AHB1ENR |= GPIOBEN;
 8000cc0:	4b48      	ldr	r3, [pc, #288]	@ (8000de4 <i2c1_init+0x128>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a47      	ldr	r2, [pc, #284]	@ (8000de4 <i2c1_init+0x128>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30

	// enable clock access for i2c1
	RCC->APB1ENR |= I2C1_EN;
 8000ccc:	4b45      	ldr	r3, [pc, #276]	@ (8000de4 <i2c1_init+0x128>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a44      	ldr	r2, [pc, #272]	@ (8000de4 <i2c1_init+0x128>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40

	// set mode as AF for pb6 and pb7 (10: Alternate function mode)
	GPIOB->MODER &= ~(1U<<12);
 8000cd8:	4b43      	ldr	r3, [pc, #268]	@ (8000de8 <i2c1_init+0x12c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a42      	ldr	r2, [pc, #264]	@ (8000de8 <i2c1_init+0x12c>)
 8000cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ce2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13); //pb6
 8000ce4:	4b40      	ldr	r3, [pc, #256]	@ (8000de8 <i2c1_init+0x12c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8000de8 <i2c1_init+0x12c>)
 8000cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cee:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000de8 <i2c1_init+0x12c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8000de8 <i2c1_init+0x12c>)
 8000cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cfa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15); //pb7
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <i2c1_init+0x12c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a39      	ldr	r2, [pc, #228]	@ (8000de8 <i2c1_init+0x12c>)
 8000d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d06:	6013      	str	r3, [r2, #0]

	// set PB6 and PB7 alternate function type to I2C1 (0100: AF4)
	GPIOB->AFR[0] &= ~(1U<<24);
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <i2c1_init+0x12c>)
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4a36      	ldr	r2, [pc, #216]	@ (8000de8 <i2c1_init+0x12c>)
 8000d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d12:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <i2c1_init+0x12c>)
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4a33      	ldr	r2, [pc, #204]	@ (8000de8 <i2c1_init+0x12c>)
 8000d1a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000d1e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8000d20:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <i2c1_init+0x12c>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	4a30      	ldr	r2, [pc, #192]	@ (8000de8 <i2c1_init+0x12c>)
 8000d26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d2a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27); //pb6
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <i2c1_init+0x12c>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <i2c1_init+0x12c>)
 8000d32:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000d36:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <i2c1_init+0x12c>)
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000de8 <i2c1_init+0x12c>)
 8000d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8000d44:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <i2c1_init+0x12c>)
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4a27      	ldr	r2, [pc, #156]	@ (8000de8 <i2c1_init+0x12c>)
 8000d4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000d4e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8000d50:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <i2c1_init+0x12c>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4a24      	ldr	r2, [pc, #144]	@ (8000de8 <i2c1_init+0x12c>)
 8000d56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d5a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31); //pb7
 8000d5c:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <i2c1_init+0x12c>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a21      	ldr	r2, [pc, #132]	@ (8000de8 <i2c1_init+0x12c>)
 8000d62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d66:	6213      	str	r3, [r2, #32]

	// set output type as open-drain outputs with pull-up
	GPIOB->OTYPER |= ((1U << 6) | (1U << 7));
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <i2c1_init+0x12c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <i2c1_init+0x12c>)
 8000d6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000d72:	6053      	str	r3, [r2, #4]
	//-----------i2c1 config--------------
	//--------------------------------------

	// _6_ Configure I2C control register

	I2C1->CR1 |= I2C1_SWRST; //reset module
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <i2c1_init+0x130>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1c      	ldr	r2, [pc, #112]	@ (8000dec <i2c1_init+0x130>)
 8000d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C1_SWRST; //release
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <i2c1_init+0x130>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <i2c1_init+0x130>)
 8000d86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d8a:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C1_NOSTRETCH; // wait for slave
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <i2c1_init+0x130>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a16      	ldr	r2, [pc, #88]	@ (8000dec <i2c1_init+0x130>)
 8000d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d96:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C1_ENGC; //General call disabled
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <i2c1_init+0x130>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a13      	ldr	r2, [pc, #76]	@ (8000dec <i2c1_init+0x130>)
 8000d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000da2:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= I2C1_DMAEN; //DMA request enabled
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <i2c1_init+0x130>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <i2c1_init+0x130>)
 8000daa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dae:	6053      	str	r3, [r2, #4]

	I2C1->CR2 |= I2C1_LAST; //DMA EOT is the last transfer
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <i2c1_init+0x130>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <i2c1_init+0x130>)
 8000db6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dba:	6053      	str	r3, [r2, #4]

	I2C1->CR2 = 16; // Peripheral clock frequency 16MHz
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <i2c1_init+0x130>)
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	605a      	str	r2, [r3, #4]

	I2C1->CCR = 80; //Set standard mode speed to 100kHz
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <i2c1_init+0x130>)
 8000dc4:	2250      	movs	r2, #80	@ 0x50
 8000dc6:	61da      	str	r2, [r3, #28]
	 * 		TRISE = (1000ns / T_PCLK) + 1
			T_PCLK = 1 / Fpclk = 1 / 16MHz = 62.5ns
			TRISE = 1000 / 62.5 + 1 = 16 + 1 = 17
	 *
	 */
	I2C1->TRISE = 17;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <i2c1_init+0x130>)
 8000dca:	2211      	movs	r2, #17
 8000dcc:	621a      	str	r2, [r3, #32]
	// _7_ Enable I2C1 peripheral (set PE bit in CR1)
	I2C1->CR1 |= I2C1_PE; // PE bit → I2C enable
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <i2c1_init+0x130>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <i2c1_init+0x130>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6013      	str	r3, [r2, #0]

	//--------------------------------------
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40005400 	.word	0x40005400

08000df0 <i2c_tx_dma_stream6>:



void i2c_tx_dma_stream6(void){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

	//DMA1 clock enabled
	RCC->AHB1ENR |=DMA1EN;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <i2c_tx_dma_stream6+0x84>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <i2c_tx_dma_stream6+0x84>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfe:	6313      	str	r3, [r2, #48]	@ 0x30

	//disable dma
	DMA1_Stream6->CR = 0;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
	while(DMA1_Stream6->CR & DMA_S_CR_EN){}
 8000e06:	bf00      	nop
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f9      	bne.n	8000e08 <i2c_tx_dma_stream6+0x18>

	//Channel selection: channel 1: 001
	DMA1_Stream6->CR |= (1U<<25);
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1e:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= ~(1U<<26);
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000e2a:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= ~(1U<<27);
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a11      	ldr	r2, [pc, #68]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e32:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000e36:	6013      	str	r3, [r2, #0]

	//Memory increment is enabled
	DMA1_Stream6->CR |= DMA_S_CR_MINC;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e42:	6013      	str	r3, [r2, #0]

	//Transfer complete interrupt is enabled
	DMA1_Stream6->CR |= DMA_S_CR_TCIE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]

	//Transfer dir: 01: Memory-to-peripheral
	DMA1_Stream6->CR |= (1U<<6);
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5a:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= ~(1U<<7);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <i2c_tx_dma_stream6+0x88>)
 8000e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e66:	6013      	str	r3, [r2, #0]

	//Enable stream interrupt in nvic
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e68:	2011      	movs	r0, #17
 8000e6a:	f7ff ff09 	bl	8000c80 <__NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	400260a0 	.word	0x400260a0

08000e7c <i2c_rx_dma_stream5>:

void i2c_rx_dma_stream5(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	//DMA1 clock enabled
	RCC->AHB1ENR |=DMA1EN;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <i2c_rx_dma_stream5+0x84>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a1e      	ldr	r2, [pc, #120]	@ (8000f00 <i2c_rx_dma_stream5+0x84>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30

	//disable dma
	DMA1_Stream5->CR = 0;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
	while(DMA1_Stream5->CR & DMA_S_CR_EN){}
 8000e92:	bf00      	nop
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f9      	bne.n	8000e94 <i2c_rx_dma_stream5+0x18>

	//Channel selection: channel 1: 001
	DMA1_Stream5->CR |= (1U<<25);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eaa:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= ~(1U<<26);
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000eb6:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= ~(1U<<27);
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ebe:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000ec2:	6013      	str	r3, [r2, #0]

	//Memory increment is enabled
	DMA1_Stream5->CR |= DMA_S_CR_MINC;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]

	//Transfer complete interrupt is enabled
	DMA1_Stream5->CR |= DMA_S_CR_TCIE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6013      	str	r3, [r2, #0]

	//Transfer dir: 01: peripheral to Memory
	DMA1_Stream5->CR &= ~(1U<<6);
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ee6:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= ~(1U<<7);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <i2c_rx_dma_stream5+0x88>)
 8000eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ef2:	6013      	str	r3, [r2, #0]

	//Enable stream interrupt in nvic
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f7ff fec3 	bl	8000c80 <__NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40026088 	.word	0x40026088

08000f08 <i2c_dma_transfer>:

void i2c_dma_transfer(uint8_t *data, uint32_t size) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	//stream 6
	if(NULL != data){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d014      	beq.n	8000f42 <i2c_dma_transfer+0x3a>

		// clear transfer complete interrupt flag
		DMA1->HIFCR |= TCIF6; //CTCIF6
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <i2c_dma_transfer+0x48>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <i2c_dma_transfer+0x48>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f22:	60d3      	str	r3, [r2, #12]

		//peripheral address
		DMA1_Stream6->PAR = (uint32_t)(&(I2C1->DR));
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <i2c_dma_transfer+0x4c>)
 8000f26:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <i2c_dma_transfer+0x50>)
 8000f28:	609a      	str	r2, [r3, #8]

		//memory address
		DMA1_Stream6->M0AR = (uint32_t)data;
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <i2c_dma_transfer+0x4c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	60d3      	str	r3, [r2, #12]

		//transfer length
		DMA1_Stream6->NDTR = size;
 8000f30:	4a08      	ldr	r2, [pc, #32]	@ (8000f54 <i2c_dma_transfer+0x4c>)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	6053      	str	r3, [r2, #4]

		DMA1_Stream6->CR |= DMA_S_CR_EN; // EN
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <i2c_dma_transfer+0x4c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <i2c_dma_transfer+0x4c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]

	}


}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40026000 	.word	0x40026000
 8000f54:	400260a0 	.word	0x400260a0
 8000f58:	40005410 	.word	0x40005410

08000f5c <i2c_dma_receive>:

void i2c_dma_receive(uint8_t *buffer, uint32_t size) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	//stream 5
	if(NULL != buffer){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d014      	beq.n	8000f96 <i2c_dma_receive+0x3a>
	// clear transfer complete interrupt flag
	DMA1->HIFCR |= TCIF5; //CTCIF5
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <i2c_dma_receive+0x48>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <i2c_dma_receive+0x48>)
 8000f72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f76:	60d3      	str	r3, [r2, #12]

	//peripheral address
	DMA1_Stream5->PAR = (uint32_t)(&(I2C1->DR));
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <i2c_dma_receive+0x4c>)
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <i2c_dma_receive+0x50>)
 8000f7c:	609a      	str	r2, [r3, #8]

	//memory address
	DMA1_Stream5->M0AR = (uint32_t)buffer;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <i2c_dma_receive+0x4c>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60d3      	str	r3, [r2, #12]

	//transfer length
	DMA1_Stream5->NDTR = size;
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <i2c_dma_receive+0x4c>)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	6053      	str	r3, [r2, #4]

	DMA1_Stream5->CR |= DMA_S_CR_EN; // EN
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <i2c_dma_receive+0x4c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <i2c_dma_receive+0x4c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6013      	str	r3, [r2, #0]

	}

}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40026000 	.word	0x40026000
 8000fa8:	40026088 	.word	0x40026088
 8000fac:	40005410 	.word	0x40005410

08000fb0 <i2c_read>:

void i2c_read(uint8_t slave_address, uint8_t reg, uint8_t *data, uint32_t size){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60ba      	str	r2, [r7, #8]
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	73bb      	strb	r3, [r7, #14]

	 // Wait for bus is not busy
	while ((I2C1->SR2 & I2C1_SR2_BUSY)){}
 8000fc2:	bf00      	nop
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <i2c_read+0x100>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f9      	bne.n	8000fc4 <i2c_read+0x14>

    I2C1->CR1 |= I2C1_START; // START
 8000fd0:	4b37      	ldr	r3, [pc, #220]	@ (80010b0 <i2c_read+0x100>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a36      	ldr	r2, [pc, #216]	@ (80010b0 <i2c_read+0x100>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fda:	6013      	str	r3, [r2, #0]

    while (!(I2C1->SR1 & I2C1_SB)){} // SB
 8000fdc:	bf00      	nop
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <i2c_read+0x100>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f9      	beq.n	8000fde <i2c_read+0x2e>

    (void)I2C1->SR1;
 8000fea:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <i2c_read+0x100>)
 8000fec:	695b      	ldr	r3, [r3, #20]
    //Cleared by reading the SR1 register

    I2C1->DR = (slave_address << 1); // Write
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80010b0 <i2c_read+0x100>)
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C1_ADDR)){} // ADDR
 8000ff6:	bf00      	nop
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <i2c_read+0x100>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f9      	beq.n	8000ff8 <i2c_read+0x48>
    //Received address matched

    (void)I2C1->SR1;
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <i2c_read+0x100>)
 8001006:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <i2c_read+0x100>)
 800100a:	699b      	ldr	r3, [r3, #24]
    //clearing sequence (READ SR1 then READ SR2) after ADDR is set.

    while (!(I2C1->SR1 & I2C1_TXE)){} // TXE
 800100c:	bf00      	nop
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <i2c_read+0x100>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <i2c_read+0x5e>
    //Data register is empty (transmitters)

    if(size >= 2){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d909      	bls.n	8001034 <i2c_read+0x84>
    	I2C1->CR1 |= I2C1_ACK; // Enable ACK
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <i2c_read+0x100>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <i2c_read+0x100>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102a:	6013      	str	r3, [r2, #0]
    	I2C1->DR = reg; // Register address
 800102c:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <i2c_read+0x100>)
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	6113      	str	r3, [r2, #16]
 8001032:	e008      	b.n	8001046 <i2c_read+0x96>
    }else {
    	I2C1->CR1 &= ~I2C1_ACK; // disable ACK
 8001034:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <i2c_read+0x100>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <i2c_read+0x100>)
 800103a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800103e:	6013      	str	r3, [r2, #0]
    	I2C1->DR = reg; // Register address
 8001040:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <i2c_read+0x100>)
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	6113      	str	r3, [r2, #16]
    }



    while (!(I2C1->SR1 & I2C1_BTF)); // wait until Byte transfer finished
 8001046:	bf00      	nop
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <i2c_read+0x100>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f9      	beq.n	8001048 <i2c_read+0x98>

    // 2. Repeated START

    I2C1->CR1 |= I2C1_START; // START
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <i2c_read+0x100>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <i2c_read+0x100>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]

    while (!(I2C1->SR1 & I2C1_SB)){} // SB
 8001060:	bf00      	nop
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <i2c_read+0x100>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f9      	beq.n	8001062 <i2c_read+0xb2>


    (void)I2C1->SR1;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <i2c_read+0x100>)
 8001070:	695b      	ldr	r3, [r3, #20]

    I2C1->DR = ((slave_address << 1) | 1); // Read
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <i2c_read+0x100>)
 800107c:	611a      	str	r2, [r3, #16]

    while (!(I2C1->SR1 & I2C1_ADDR)); // ADDR
 800107e:	bf00      	nop
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <i2c_read+0x100>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <i2c_read+0xd0>

    I2C1->SR1;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <i2c_read+0x100>)
 800108e:	695b      	ldr	r3, [r3, #20]
    I2C1->SR2;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <i2c_read+0x100>)
 8001092:	699b      	ldr	r3, [r3, #24]

    I2C1->CR2 |= I2C1_DMAEN | I2C1_LAST;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <i2c_read+0x100>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <i2c_read+0x100>)
 800109a:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 800109e:	6053      	str	r3, [r2, #4]

    i2c_dma_receive(data,size);
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f7ff ff5a 	bl	8000f5c <i2c_dma_receive>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40005400 	.word	0x40005400

080010b4 <i2c_write>:

void i2c_write(uint8_t slave_address, uint8_t *data, uint32_t size){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	73fb      	strb	r3, [r7, #15]
	 // Wait for bus is not busy
	while ((I2C1->SR2 & I2C1_SR2_BUSY));
 80010c2:	bf00      	nop
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <i2c_write+0x74>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f9      	bne.n	80010c4 <i2c_write+0x10>

   I2C1->CR1 |= I2C1_START; // START
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <i2c_write+0x74>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <i2c_write+0x74>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010da:	6013      	str	r3, [r2, #0]

   while (!(I2C1->SR1 & I2C1_SB)); // SB
 80010dc:	bf00      	nop
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <i2c_write+0x74>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f9      	beq.n	80010de <i2c_write+0x2a>

   (void)I2C1->SR1;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <i2c_write+0x74>)
 80010ec:	695b      	ldr	r3, [r3, #20]

   I2C1->DR = (slave_address << 1); // Write
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <i2c_write+0x74>)
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	6113      	str	r3, [r2, #16]

   while (!(I2C1->SR1 & I2C1_ADDR)); // ADDR
 80010f6:	bf00      	nop
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <i2c_write+0x74>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <i2c_write+0x44>

   (void)I2C1->SR1;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <i2c_write+0x74>)
 8001106:	695b      	ldr	r3, [r3, #20]
   (void)I2C1->SR2;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <i2c_write+0x74>)
 800110a:	699b      	ldr	r3, [r3, #24]

   I2C1->CR2 |= I2C1_DMAEN | I2C1_LAST;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <i2c_write+0x74>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <i2c_write+0x74>)
 8001112:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8001116:	6053      	str	r3, [r2, #4]

   i2c_dma_transfer(data, size);
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f7ff fef4 	bl	8000f08 <i2c_dma_transfer>

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40005400 	.word	0x40005400

0800112c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

	if ((DMA1->HISR & TCIF5)){ // TCIF5: receive complete
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <DMA1_Stream5_IRQHandler+0x34>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <DMA1_Stream5_IRQHandler+0x28>

		// 5. STOP condition
		I2C1->CR1 |= I2C1_STOP; // STOP
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <DMA1_Stream5_IRQHandler+0x38>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <DMA1_Stream5_IRQHandler+0x38>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001146:	6013      	str	r3, [r2, #0]

		//do something
		DMA1->HIFCR |= TCIF5; // clear flag
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <DMA1_Stream5_IRQHandler+0x34>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <DMA1_Stream5_IRQHandler+0x34>)
 800114e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001152:	60d3      	str	r3, [r2, #12]

	}

}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40026000 	.word	0x40026000
 8001164:	40005400 	.word	0x40005400

08001168 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0


	if ((DMA1->HISR & TCIF6)){ // TCIF5: receive complete
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <DMA1_Stream6_IRQHandler+0x34>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <DMA1_Stream6_IRQHandler+0x28>

			// 5. STOP condition
			I2C1->CR1 |= I2C1_STOP; // STOP
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <DMA1_Stream6_IRQHandler+0x38>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <DMA1_Stream6_IRQHandler+0x38>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001182:	6013      	str	r3, [r2, #0]

			//do something
			DMA1->HIFCR |= TCIF6; // clear
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <DMA1_Stream6_IRQHandler+0x34>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <DMA1_Stream6_IRQHandler+0x34>)
 800118a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118e:	60d3      	str	r3, [r2, #12]

		}

}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40026000 	.word	0x40026000
 80011a0:	40005400 	.word	0x40005400

080011a4 <main>:
#include <stdint.h>

int32_t temp_raw = 0;
int32_t press_raw = 0;

int main(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

	uint8_t id=0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
    i2c1_init();
 80011ae:	f7ff fd85 	bl	8000cbc <i2c1_init>
    delay_ms(100);
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f7ff fcfe 	bl	8000bb4 <delay_ms>
    i2c_tx_dma_stream6();
 80011b8:	f7ff fe1a 	bl	8000df0 <i2c_tx_dma_stream6>
    i2c_rx_dma_stream5();
 80011bc:	f7ff fe5e 	bl	8000e7c <i2c_rx_dma_stream5>
    delay_ms(100);
 80011c0:	2064      	movs	r0, #100	@ 0x64
 80011c2:	f7ff fcf7 	bl	8000bb4 <delay_ms>

    // BMP280 start
    i2c_read(BMP280_ADDR, BMP280_ID_REG, &id, 1);
 80011c6:	1dfa      	adds	r2, r7, #7
 80011c8:	2301      	movs	r3, #1
 80011ca:	21d0      	movs	r1, #208	@ 0xd0
 80011cc:	2076      	movs	r0, #118	@ 0x76
 80011ce:	f7ff feef 	bl	8000fb0 <i2c_read>
    if (id != 0x58) {
        // ID is wrong!
        //do something
    }

    bmp280_init();
 80011d2:	f7ff fd1c 	bl	8000c0e <bmp280_init>

    delay_ms(100);
 80011d6:	2064      	movs	r0, #100	@ 0x64
 80011d8:	f7ff fcec 	bl	8000bb4 <delay_ms>

    while (1) {
        bmp280_read_raw_temp_press(&temp_raw, &press_raw);
 80011dc:	4904      	ldr	r1, [pc, #16]	@ (80011f0 <main+0x4c>)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <main+0x50>)
 80011e0:	f7ff fd2c 	bl	8000c3c <bmp280_read_raw_temp_press>

        delay_ms(10);
 80011e4:	200a      	movs	r0, #10
 80011e6:	f7ff fce5 	bl	8000bb4 <delay_ms>
        bmp280_read_raw_temp_press(&temp_raw, &press_raw);
 80011ea:	bf00      	nop
 80011ec:	e7f6      	b.n	80011dc <main+0x38>
 80011ee:	bf00      	nop
 80011f0:	20000044 	.word	0x20000044
 80011f4:	20000040 	.word	0x20000040

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001226:	f000 f811 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff ffbb 	bl	80011a4 <main>

0800122e <LoopForever>:

LoopForever:
  b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800123c:	080012b4 	.word	0x080012b4
  ldr r2, =_sbss
 8001240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001244:	20000048 	.word	0x20000048

08001248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	4d0d      	ldr	r5, [pc, #52]	@ (8001284 <__libc_init_array+0x38>)
 8001250:	4c0d      	ldr	r4, [pc, #52]	@ (8001288 <__libc_init_array+0x3c>)
 8001252:	1b64      	subs	r4, r4, r5
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	2600      	movs	r6, #0
 8001258:	42a6      	cmp	r6, r4
 800125a:	d109      	bne.n	8001270 <__libc_init_array+0x24>
 800125c:	4d0b      	ldr	r5, [pc, #44]	@ (800128c <__libc_init_array+0x40>)
 800125e:	4c0c      	ldr	r4, [pc, #48]	@ (8001290 <__libc_init_array+0x44>)
 8001260:	f000 f818 	bl	8001294 <_init>
 8001264:	1b64      	subs	r4, r4, r5
 8001266:	10a4      	asrs	r4, r4, #2
 8001268:	2600      	movs	r6, #0
 800126a:	42a6      	cmp	r6, r4
 800126c:	d105      	bne.n	800127a <__libc_init_array+0x2e>
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	f855 3b04 	ldr.w	r3, [r5], #4
 8001274:	4798      	blx	r3
 8001276:	3601      	adds	r6, #1
 8001278:	e7ee      	b.n	8001258 <__libc_init_array+0xc>
 800127a:	f855 3b04 	ldr.w	r3, [r5], #4
 800127e:	4798      	blx	r3
 8001280:	3601      	adds	r6, #1
 8001282:	e7f2      	b.n	800126a <__libc_init_array+0x1e>
 8001284:	080012ac 	.word	0x080012ac
 8001288:	080012ac 	.word	0x080012ac
 800128c:	080012ac 	.word	0x080012ac
 8001290:	080012b0 	.word	0x080012b0

08001294 <_init>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr

080012a0 <_fini>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr
